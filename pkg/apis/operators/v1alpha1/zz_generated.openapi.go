// +build !ignore_autogenerated

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"./pkg/apis/operators/v1alpha1.MultiCloudHub":       schema_pkg_apis_operators_v1alpha1_MultiCloudHub(ref),
		"./pkg/apis/operators/v1alpha1.MultiCloudHubSpec":   schema_pkg_apis_operators_v1alpha1_MultiCloudHubSpec(ref),
		"./pkg/apis/operators/v1alpha1.MultiCloudHubStatus": schema_pkg_apis_operators_v1alpha1_MultiCloudHubStatus(ref),
	}
}

func schema_pkg_apis_operators_v1alpha1_MultiCloudHub(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MultiCloudHub is the Schema for the multicloudhubs API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/operators/v1alpha1.MultiCloudHubSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/operators/v1alpha1.MultiCloudHubStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/operators/v1alpha1.MultiCloudHubSpec", "./pkg/apis/operators/v1alpha1.MultiCloudHubStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_operators_v1alpha1_MultiCloudHubSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MultiCloudHubSpec defines the desired state of MultiCloudHub",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"version": {
						SchemaProps: spec.SchemaProps{
							Description: "Version of the MultiCloud hub",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"imageRepository": {
						SchemaProps: spec.SchemaProps{
							Description: "Repository of the MultiCloud hub images",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"imagePullPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Pull policy of the MultiCloud hub images",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"imagePullSecret": {
						SchemaProps: spec.SchemaProps{
							Description: "Pull secret of the MultiCloud hub images",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"nodeSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "Spec of NodeSelector",
							Ref:         ref("./pkg/apis/operators/v1alpha1.NodeSelector"),
						},
					},
					"foundation": {
						SchemaProps: spec.SchemaProps{
							Description: "Spec of foundation",
							Ref:         ref("./pkg/apis/operators/v1alpha1.Foundation"),
						},
					},
					"etcd": {
						SchemaProps: spec.SchemaProps{
							Description: "Spec of etcd",
							Ref:         ref("./pkg/apis/operators/v1alpha1.Etcd"),
						},
					},
					"mongo": {
						SchemaProps: spec.SchemaProps{
							Description: "Spec of mongo",
							Ref:         ref("./pkg/apis/operators/v1alpha1.Mongo"),
						},
					},
				},
				Required: []string{"version", "imageRepository", "imagePullPolicy", "foundation", "etcd", "mongo"},
			},
		},
		Dependencies: []string{
			"./pkg/apis/operators/v1alpha1.Etcd", "./pkg/apis/operators/v1alpha1.Foundation", "./pkg/apis/operators/v1alpha1.Mongo", "./pkg/apis/operators/v1alpha1.NodeSelector"},
	}
}

func schema_pkg_apis_operators_v1alpha1_MultiCloudHubStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MultiCloudHubStatus defines the observed state of MultiCloudHub",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"phase": {
						SchemaProps: spec.SchemaProps{
							Description: "Represents the running phase of the MultiCloudHub",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"deployments": {
						SchemaProps: spec.SchemaProps{
							Description: "Represents the status of each deployment",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./pkg/apis/operators/v1alpha1.DeploymentResult"),
									},
								},
							},
						},
					},
				},
				Required: []string{"phase"},
			},
		},
		Dependencies: []string{
			"./pkg/apis/operators/v1alpha1.DeploymentResult"},
	}
}
